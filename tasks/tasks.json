{
  "tasks": [
    {
      "id": 1,
      "title": "Test task 1",
      "description": "some description",
      "details": "",
      "testStrategy": "",
      "status": "in-progress",
      "dependencies": [],
      "priority": "high",
      "metadata": {
        "refId": "US001",
        "jiraKey": "TS2-256",
        "lastStatusUpdate": "2025-05-23T19:34:49.391Z"
      },
      "subtasks": [
        {
          "id": 1,
          "title": "Implement event system initialization for ticketing sync",
          "description": "Set up the event system infrastructure required for the ticketing synchronization to function properly. This includes creating event listeners, handlers, and ensuring the proper initialization sequence.",
          "dependencies": [],
          "details": "1. Create an EventManager class to handle event registration and dispatching\n2. Implement event listeners for ticket creation, updates, and status changes\n3. Set up the initialization sequence in the application startup flow\n4. Add configuration options for enabling/disabling the ticketing sync feature\n5. Implement proper error handling and logging for event system failures",
          "status": "pending",
          "testStrategy": "Create unit tests that verify event registration works correctly and that the initialization sequence runs in the proper order. Mock external dependencies to isolate the event system functionality.",
          "metadata": {
            "refId": "T001-01"
          }
        },
        {
          "id": 2,
          "title": "Create integration tests for ticketing sync functionality",
          "description": "Develop comprehensive integration tests that verify the ticketing synchronization works end-to-end, including proper event handling, data transformation, and external system communication.",
          "dependencies": [
            1
          ],
          "details": "1. Set up a test environment with mock external ticketing systems\n2. Create test cases for ticket creation, updates, and deletion scenarios\n3. Implement assertions to verify data consistency between systems\n4. Test error handling and recovery mechanisms\n5. Verify performance meets requirements under various load conditions",
          "status": "pending",
          "testStrategy": "Use integration tests that simulate real-world usage patterns. Create mock servers for external ticketing systems to avoid actual API calls during testing. Include both happy path and error scenarios to ensure robust handling of all conditions.",
          "metadata": {
            "refId": "T001-02"
          }
        },
        {
          "id": 3,
          "title": "Manual test subtask for ticketing sync verification",
          "description": "This subtask is added manually to verify if ticketing sync works for individual subtask additions",
          "details": "",
          "status": "pending",
          "dependencies": [],
          "metadata": {
            "refId": "T001-03"
          },
          "parentTaskId": 1
        },
        {
          "id": 4,
          "title": "CLI test subtask",
          "description": "Testing if CLI ticketing sync works",
          "details": "",
          "status": "pending",
          "dependencies": [],
          "metadata": {
            "refId": "T001-04"
          },
          "parentTaskId": 1
        },
        {
          "id": 5,
          "title": "Fixed test subtask",
          "description": "Testing the fixed ticketing sync handler",
          "details": "",
          "status": "pending",
          "dependencies": [],
          "metadata": {
            "refId": "T001-05"
          },
          "parentTaskId": 1
        }
      ]
    }
  ]
}